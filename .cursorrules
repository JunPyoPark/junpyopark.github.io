# Jekyll 블로그 개발 가이드

## 🎨 배경색 문제 해결 방법

### 문제 상황
- Jekyll 블로그에서 포스트별 고유한 배경색이 전역 CSS에 의해 덮어써짐
- `assets/css/main.css`의 `body { background-color: #fbfbfb; }`가 포스트 CSS보다 높은 우선순위를 가짐
- 결과적으로 포스트의 의도된 디자인이 무시되고 전역 배경색이 적용됨

### 해결 방법
모든 포스트의 `body` CSS에 `!important`를 추가하여 전역 CSS 간섭을 방지:

```css
body { 
    background-color: #원하는색상 !important;
    font-family: '폰트명', sans-serif;
}
```

### 적용 예시
```css
/* 집단 착각 - 연한 파란색 */
body { background-color: #F0F8FF !important; }

/* 소유와 자유 - 어두운 슬레이트 */
body { background-color: #0F172A !important; }

/* 국가란 무엇인가 - 흰색 */
body { background-color: white !important; }
```

### 자동화 스크립트
모든 2025년 포스트에 자동 적용:
```bash
for file in _posts/2025-*; do
  if grep -q "body {" "$file"; then
    sed -i 's/background-color: \([^;]*\);/background-color: \1 !important;/g' "$file"
  fi
done
```

### 중복 제거
중복된 `!important` 제거:
```bash
sed -i 's/!important !important/!important/g' _posts/2025-*
```

## 🖼️ 썸네일 이미지 문제 해결

### 문제 상황
- Jekyll 템플릿이 `assets/img/` 경로를 자동으로 추가
- 절대 URL 사용 시 경로가 중복되어 이미지가 로드되지 않음

### 해결 방법
1. 이미지를 로컬에 다운로드:
```bash
wget -O assets/img/파일명.jpg "https://이미지URL"
```

2. 포스트의 `img` 필드를 로컬 파일명으로 변경:
```yaml
img: "파일명.jpg"  # 절대 URL 대신 파일명만 사용
```

### Jekyll 템플릿 동작
- `index.html`: `{{"/assets/img/" | prepend: site.baseurl | append : post.img}}`
- `_layouts/post.html`: `{{ "/assets/img/" | prepend: site.baseurl | append : page.img}}`
- 자동으로 올바른 경로 생성: `/assets/img/파일명.jpg`

## 🔧 CSS 우선순위 규칙

### 전역 CSS (assets/css/main.css)
```css
body {
  background-color: #fbfbfb;  /* 낮은 우선순위 */
}
```

### 포스트별 CSS
```css
body { 
  background-color: #원하는색상 !important;  /* 높은 우선순위 */
}
```

### 우선순위 순서
1. `!important`가 있는 CSS (최고 우선순위)
2. 더 구체적인 선택자
3. 나중에 로드된 CSS
4. 전역 CSS

## 📝 체크리스트

새로운 포스트 추가 시:
- [ ] `img` 필드에 로컬 파일명 사용 (절대 URL 금지)
- [ ] `body` CSS에 `background-color: 색상 !important;` 추가
- [ ] 이미지 파일을 `assets/img/`에 저장
- [ ] 포스트별 고유한 디자인 테마 유지

## 🚨 주의사항

- `!important` 남용은 CSS 유지보수를 어렵게 만들 수 있음
- 포스트별 CSS는 최소한으로 사용하고 전역 스타일과 충돌하지 않도록 주의
- 이미지 파일명은 영문과 하이픈만 사용 (공백, 특수문자 금지)

## 🔧 추가 배경색 문제 해결

### 컨테이너 요소 배경색 문제
- `body`에 `!important`를 적용해도 `div.container`나 `main` 요소가 흰색으로 보이는 경우
- Jekyll 레이아웃에서 컨테이너 요소들이 별도로 렌더링됨

### 해결 방법
각 포스트의 컨테이너 요소에도 배경색을 강제 적용:

```html
<div class="container mx-auto p-4 md:p-8">
    <style>
        .container { background-color: #원하는색상 !important; }
        main { background-color: #원하는색상 !important; }
    </style>
    <!-- 포스트 내용 -->
</div>
```

### 자동화 스크립트
```bash
# 특정 포스트에 컨테이너 배경색 추가
sed -i '/<div class="container mx-auto p-4 md:p-8">/a\        <style>\n            .container { background-color: #색상코드 !important; }\n            main { background-color: #색상코드 !important; }\n        </style>' _posts/파일명.html
```

### 체크리스트 업데이트
- [ ] `body` CSS에 `!important` 적용
- [ ] `div.container` 요소에도 배경색 적용
- [ ] `main` 요소에도 배경색 적용
- [ ] 모든 컨테이너 요소가 일관된 배경색을 가지는지 확인

## 🤖 Gemini HTML → Jekyll 포스트 변환 가이드

### 변환 프로세스
1. **HTML 구조 제거**: `<!DOCTYPE html>`, `<html>`, `<head>`, `<body>` 태그 제거
2. **Jekyll Front Matter 추가**: 제목, 날짜, 설명, 태그, 이미지 등
3. **AdSense 스크립트 추가**: 수익화를 위한 광고 코드
4. **배경색 강제 적용**: `body`, `.container`, `main` 요소에 `!important` 적용
5. **접근성 개선**: `aria-label`, `role="img"` 속성 추가

### 필수 변환 규칙

#### 1. Front Matter 구조
```yaml
---
layout: post
title: "제목"
date: 2025-09-10 20:00:00 +0900
description: "설명"
tags: [태그1, 태그2, 태그3]
canonical_url: "https://junpyopark.github.io/url-slug"
author: "박준표"
img: "이미지파일명.jpg"
keywords: "키워드1, 키워드2, 키워드3"
---
```

#### 2. AdSense 코드 추가
```html
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article"
     data-ad-format="fluid" data-ad-client="ca-pub-4993132508717238" data-ad-slot="7426355186"></ins>
<script>
  (adsbygoogle = window.adsbygoogle || []).push({});
</script>
```

#### 3. 배경색 강제 적용
```html
<div class="container mx-auto p-4 md:p-8">
    <style>
        body { background-color: #색상코드 !important; }
        .container { background-color: #색상코드 !important; }
        main { background-color: #색상코드 !important; }
    </style>
    <!-- 컨텐츠 -->
</div>
```

#### 4. 접근성 개선
- 모든 `img` 태그에 `aria-label` 추가
- `canvas` 요소에 `aria-label` 및 `role="img"` 추가
- 버튼에 `aria-expanded`, `title` 속성 추가

### 자동화 스크립트
```bash
# 1. 이미지 다운로드
wget -O assets/img/파일명.jpg "https://이미지URL"

# 2. 배경색 강제 적용
sed -i '/<div class="container mx-auto p-4 md:p-8">/a\        <style>\n            body { background-color: #색상코드 !important; }\n            .container { background-color: #색상코드 !important; }\n            main { background-color: #색상코드 !important; }\n        </style>' _posts/파일명.html

# 3. 접근성 속성 추가
sed -i 's/<img/<img aria-label="설명" /g' _posts/파일명.html
```

### 체크리스트
- [ ] HTML 구조 태그 제거 완료
- [ ] Jekyll Front Matter 추가 완료
- [ ] AdSense 스크립트 추가 완료
- [ ] 배경색 강제 적용 완료
- [ ] 접근성 속성 추가 완료
- [ ] 이미지 로컬 저장 완료
- [ ] `img` 필드에 로컬 파일명 사용 완료

## 🔗 Jekyll URL 규칙 정정

### 실제 Jekyll URL 생성 규칙
- Jekyll은 파일명에서 날짜 부분(`YYYY-MM-DD-`)만 제거하고 나머지는 **그대로** 사용
- **kebab-case 자동 변환은 하지 않음**
- 파일명: `2025-09-10-camelCaseName.html` → 실제 URL: `/camelCaseName/`

### 올바른 canonical_url 설정
```yaml
# 파일명: 2025-09-10-collectiveIllusions.html
canonical_url: "https://junpyopark.github.io/collectiveIllusions"

# 파일명: 2025-09-10-propertyAndFreedom.html  
canonical_url: "https://junpyopark.github.io/propertyAndFreedom"

# 파일명: 2025-09-10-whatNations.html
canonical_url: "https://junpyopark.github.io/whatNations"
```

### ❌ 잘못된 예시 (kebab-case)
```yaml
canonical_url: "https://junpyopark.github.io/collective-illusions"  # ❌
canonical_url: "https://junpyopark.github.io/property-and-freedom"  # ❌
canonical_url: "https://junpyopark.github.io/what-nations"         # ❌
```

### ✅ 올바른 예시 (camelCase 그대로)
```yaml
canonical_url: "https://junpyopark.github.io/collectiveIllusions"   # ✅
canonical_url: "https://junpyopark.github.io/propertyAndFreedom"    # ✅
canonical_url: "https://junpyopark.github.io/whatNations"           # ✅
```

### 체크리스트 업데이트
- [ ] kebab-case 변환하지 말고 원본 camelCase 그대로 사용
- [ ] 파일명에서 날짜 부분 제거한 나머지가 canonical_url과 일치하는지 확인
- [ ] 실제 Jekyll URL과 canonical_url이 정확히 일치하는지 검증

## 🖼️ 이미지 최적화 가이드

### 기본 원칙
- **원본 이미지**: `assets/img/` 폴더에 저장 (기존 방식 유지)
- **최적화된 이미지**: `assets/img/optimized/` 폴더에 자동 생성
- **HTML에서 사용**: `optimized/` 폴더의 WebP 이미지 사용

### 새 이미지 추가 방법

#### 1단계: 이미지 저장
```bash
# 방법 1: URL에서 다운로드
wget -O assets/img/새이미지.jpg "https://이미지URL"

# 방법 2: 로컬 파일 복사
cp ~/Downloads/새이미지.png assets/img/
```

#### 2단계: 자동 최적화
```bash
# 모든 이미지 자동 최적화 (기존 + 새 이미지)
./optimize_images.sh
```

#### 3단계: HTML에서 사용
```html
<!-- 기존 방식 (비추천) -->
<img src="/assets/img/새이미지.jpg" alt="설명">

<!-- 최적화된 방식 (추천) -->
<picture>
  <source srcset="/assets/img/optimized/새이미지.webp" type="image/webp">
  <img src="/assets/img/optimized/새이미지.jpg" alt="설명" class="스타일">
</picture>
```

#### 4단계: Front Matter 설정
```yaml
---
img: "새이미지.jpg"  # 원본 파일명 사용 (확장자 포함)
---
```

### 최적화 효과
- **WebP**: JPEG보다 25-35% 작은 용량
- **압축**: 시각적 품질 유지하면서 파일 크기 최소화
- **폴백 지원**: 구형 브라우저를 위한 JPG 백업

### 자동화 스크립트
```bash
# 새 이미지 추가 + 최적화 (선택사항)
./add_new_image.sh "새이미지.jpg" "https://이미지URL"

# 기존 이미지만 최적화
./optimize_images.sh
```

### 체크리스트
- [ ] 원본 이미지를 `assets/img/`에 저장
- [ ] `./optimize_images.sh` 실행
- [ ] HTML에서 `<picture>` 태그 사용
- [ ] Front Matter에 원본 파일명 설정
- [ ] WebP 폴백 지원 확인

## 🚨 주의사항

- **복잡한 스크립트 사용 금지**: 기본 워크플로우만 따르기
- **원본 파일 보존**: `assets/img/`의 원본 파일은 삭제하지 않기
- **WebP 호환성**: 모든 브라우저에서 정상 작동 확인
- **파일명 규칙**: 영문, 숫자, 하이픈만 사용 (공백, 특수문자 금지)

